==============================
üìù TEAM MEMBER B - TODO LIST
==============================

1. Improve and Harden the Config System
----------------------------------------
[x] Validate `listen` is a valid number
[x] Validate root paths exist or fallback gracefully
[x] Support default values (e.g., default to `/index.html` if not set)
[x] Return `error_page` correctly (coordinate with Team A‚Äôs Response)

2. Support `error_page` Directive
----------------------------------
[x] Parse and store `error_page` (Already Done ‚úÖ)
[x] Add helper method:
        const std::string* Config::getErrorPage(int code) const
[ ] Coordinate with Team A to serve error pages (404, 405, etc.)

3. Support Uploads (BONUS Feature)
-----------------------------------
[X] In CGI or POST handler, write request body into `upload_dir`
[X] Use `upload_dir` field from `LocationConfig` if defined
      Example logic:
        if (!upload_dir.empty()) {
            std::ofstream out(upload_dir + "/file.txt");
            out << request.getBody();
        }

4. Final Integration & Testing
-------------------------------
[ ] Provide headers so Team A can use:
      - `Config` class
      - `CGIHandler` class

[ ] Test all integrated scenarios:
    [ ] `/` returns static page
    [ ] `/cgi-bin/test.py` runs correctly
    [ ] `DELETE` or `PUT` returns 405 (method not allowed)
    [ ] Non-existent path returns 404
    [ ] CGI errors are handled and logged properly

5. Write Documentation (README.txt)
------------------------------------
[ ] Document `Config` system:
    - What it parses
    - How to add new location blocks

[ ] Document `CGIHandler`:
    - How CGI execution works
    - What environment variables are passed

-------------

------------
---

## What the Code Does

- **Includes all necessary headers** for server, config, CGI, HTTP, and system calls.
- **Defines a global config object** (`g_config`).
- **Sets up a SIGCHLD handler** to reap zombie processes when CGI children exit.
- **Initializes and runs the WebServer** on port 8080 inside a `try/catch` block to handle exceptions.

---

## What‚Äôs Good / Already Present

- **Zombie reaping**: The `sigchld_handler` ensures no zombie CGI processes are left.
- **Basic error handling**: Catches and logs exceptions from the server.
- **Server startup**: Clean and straightforward.

---

## What‚Äôs Missing / Could Be Improved

1. **Graceful Shutdown**  
   - No handling for `SIGINT` (Ctrl+C) or `SIGTERM` to gracefully stop the server and clean up resources.
   - **What to do:** Add signal handlers for these signals to allow a clean shutdown.

2. **Configurable Port and Config File**  
   - The server always starts on port 8080 and uses `"default.conf"`.
   - **What to do:** Parse command-line arguments to allow custom port and config file.

3. **Logging**  
   - Only logs fatal errors to `std::cerr`.
   - **What to do:** Consider adding more detailed logging (startup, shutdown, connections, etc.).

4. **Resource Cleanup**  
   - If you add more global or heap-allocated resources, ensure they are cleaned up on shutdown.

5. **Documentation**  
   - No comments explaining the main flow or signal handling.
   - **What to do:** Add comments for maintainability.

---

## What Needs to Be Done

### 1. Add Graceful Shutdown

```cpp
volatile sig_atomic_t g_running = 1;

void sigint_handler(int) {
    g_running = 0;
}

int main(int argc, char** argv) {
    // ...existing SIGCHLD setup...
    struct sigaction sa_int;
    sa_int.sa_handler = sigint_handler;
    sigemptyset(&sa_int.sa_mask);
    sa_int.sa_flags = 0;
    sigaction(SIGINT, &sa_int, NULL);
    sigaction(SIGTERM, &sa_int, NULL);

    try {
        WebServer server(8080);
        while (g_running) {
            server.run_one_iteration(); // You may need to implement this
        }
        server.shutdown(); // Clean up sockets, etc.
    } catch (...) { ... }
}
```

### 2. Parse Command-Line Arguments

```cpp
int port = 8080;
std::string config_file = "default.conf";
if (argc > 1) port = atoi(argv[1]);
if (argc > 2) config_file = argv[2];
Config g_config(config_file.c_str());
```

### 3. Add Comments and Logging

Add comments explaining each section and consider more logging for server events.

---

## Summary Table

| Problem/Gap                | What‚Äôs Missing/Needed                | How to Fix                                   |
|----------------------------|--------------------------------------|----------------------------------------------|
| Graceful shutdown          | SIGINT/SIGTERM handling              | Add signal handlers and shutdown logic       |
| Configurable port/config   | Hardcoded values                     | Parse command-line arguments                 |
| Logging                    | Minimal logging                      | Add more logs for server lifecycle           |
| Documentation              | Few comments                         | Add comments for clarity                     |

---

**By addressing these, your main.cpp will be robust, flexible, and production-ready!**