
--• Your server must be compatible with standard web browsers of your choice.

--• You must be able to serve a fully static website.

--------------
In the configuration file, you should be able to:
• Choose the port and host of each ’server’.
• Set up the server_names or not.
• The first server for a host:port will be the default for this host:port (meaning it
will respond to all requests that do not belong to another server).
• Set up default error pages.
• Set the maximum allowed size for client request bodies.
• Set up routes with one or multiple of the following rules/configurations (routes
won’t be using regexp):
◦ Define a list of accepted HTTP methods for the route.
◦ Define an HTTP redirect.
◦ Define a directory or file where the requested file should be located (e.g.,
if url /kapouet is rooted to /tmp/www, url /kapouet/pouic/toto/pouet is
/tmp/www/pouic/toto/pouet).
◦ Enable or disable directory listing.
8
Webserv This is when you finally understand why URLs start with HTTP
◦ Set a default file to serve when the request is for a directory.
◦ Execute CGI based on certain file extension (for example .php).
◦ Make it work with POST and GET methods.
◦ Allow the route to accept uploaded files and configure where they should be
saved.
∗ Do you wonder what a CGI is?
∗ Because you won’t call the CGI directly, use the full path as PATH_INFO.
∗ Just remember that, for chunked requests, your server needs to unchunk
them, the CGI will expect EOF as the end of the body.
∗ The same applies to the output of the CGI. If no content_length is
returned from the CGI, EOF will mark the end of the returned data.
∗ Your program should call the CGI with the file requested as the first
argument.
∗ The CGI should be run in the correct directory for relative path file access.
∗ Your server should support at least one CGI (php-CGI, Python, and so
forth).
You must provide configuration files and default files to test and demonstrate that
every feature works during the evaluation.
----------------------
Write your tests in a more
suitable language, such as Python or Golang, among others, even
in C or C++ if you prefer
-----------------------
Bonus part
Here are some additional features you can implement:
• Support cookies and session management (provide simple examples).
• Handle multiple CGI.

touch 1.txt www/upload
curl -v -X POST http://localhost:8080/echo -d "hello=world&foo=bar"

curl -v -X POST http://localhost:8080/upload -F "file=@test.txt"

curl -v -X DELETE http://localhost:8080/delete/1.txt


cgi:

curl -v http://localhost:8080/cgi-bin/script.py

curl -v -X POST http://localhost:8080/cgi-bin/script.py -d "name=test"




curl -X DELETE http://localhost:8080/upload/1.txt
curl -F "file=@test.txt" http://localhost:8080/upload
curl http://localhost:8080/ 
