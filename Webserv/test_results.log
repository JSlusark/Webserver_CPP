------------------------------------------------------------
== Setup: Creating test files and directories ==
------------------------------------------------------------
------------------------------------------------------------
== Test 1: POST /cgi-bin/echo.py (application/x-www-form-urlencoded) ==
------------------------------------------------------------
>> curl -s -i -w "\nHTTP %{http_code}\n" -X POST http://localhost:8080/cgi-bin/echo.py -H "Content-Type: application/x-www-form-urlencoded" -d "hello=world&foo=bar"
HTTP/1.1 200 OK
Connection: close
Content-Length: 295
Content-Type: text/html

<html><head><title>Echo Response</title></head><body>
<h1>Echo Response</h1>
<p><strong>Method:</strong> POST</p>
<p><strong>POST Data:</strong> hello=world&foo=bar</p>
<h2>Parsed Form Data:</h2><ul>
<li><strong>hello:</strong> world</li>
<li><strong>foo:</strong> bar</li>
</ul>
</body></html>

HTTP 200

[OK] POST /cgi-bin/echo.py returned 200 OK
------------------------------------------------------------
== Test 2: POST /upload (multipart/form-data) ==
------------------------------------------------------------
>> curl -s -i -w "\nHTTP %{http_code}\n" -X POST http://localhost:8080/upload -F "file=@test.txt"
HTTP/1.1 201 Created
Connection: keep-alive
Content-Length: 803
Content-Type: text/html; charset=utf-8
Keep-Alive: timeout=5, max=100
Location: www/upload/test_20250903_123315.txt

<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1"><title>Upload Successful</title><link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"></head><body class="bg-dark text-light d-flex flex-column justify-content-center align-items-center" style="font-family:sans-serif;min-height:100vh;"><h1 class="mb-3">✅ File uploaded successfully!</h1><p class="mb-4">Saved as: <code>www/upload/test_20250903_123315.txt</code></p><div class="d-flex gap-3"><a href="/" class="btn btn-outline-light">Home</a><a href="/methods.html#demos" class="btn btn-success">Go back</a></div><script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script></body></html>
HTTP 201

[OK] POST /upload returned 201 created
------------------------------------------------------------
== Test 2b: POST /upload (multipart/form-data) in second server ==
------------------------------------------------------------
>> curl -s -i -w "\nHTTP %{http_code}\n" -X POST http://localhost:8085/new_files -F "file=@test.txt"
HTTP/1.1 201 Created
Connection: keep-alive
Content-Length: 807
Content-Type: text/html; charset=utf-8
Keep-Alive: timeout=5, max=100
Location: server2/upload/test_20250903_123315.txt

<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1"><title>Upload Successful</title><link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"></head><body class="bg-dark text-light d-flex flex-column justify-content-center align-items-center" style="font-family:sans-serif;min-height:100vh;"><h1 class="mb-3">✅ File uploaded successfully!</h1><p class="mb-4">Saved as: <code>server2/upload/test_20250903_123315.txt</code></p><div class="d-flex gap-3"><a href="/" class="btn btn-outline-light">Home</a><a href="/methods.html#demos" class="btn btn-success">Go back</a></div><script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script></body></html>
HTTP 201

[OK] POST /upload returned 201 created
------------------------------------------------------------
== Test 3: DELETE /1.txt ==
------------------------------------------------------------
>> curl -s -i -w "\nHTTP %{http_code}\n" -X DELETE http://localhost:8080/upload/1.txt
HTTP/1.1 204 No Content
Connection: close
Content-Length: 0


HTTP 204

[OK] DELETE /1.txt returned 204 204 No Content
------------------------------------------------------------
== Test 4: GET /cgi-bin/test.py ==
------------------------------------------------------------
>> curl -s -i -w "\nHTTP %{http_code}\n" http://localhost:8080/cgi-bin/test.py
HTTP/1.1 200 OK
Connection: close
Content-Length: 33
Content-Type: text/html


<html><body>Hello</body></html>

HTTP 200

[OK] CGI GET returned 200 OK
------------------------------------------------------------
== Test 5: CGI with Content-Length ==
------------------------------------------------------------
>> curl -s -i http://localhost:8080/cgi-bin/cgi_with_content_length.py
HTTP/1.1 200 OK
Connection: close
Content-Length: 56
Content-Type: text/html

<html><body>HelloWorldThisShouldBeIgnored</body></html>

[OK] CGI with Content-Length returns only specified bytes.
------------------------------------------------------------
== Test 6: GET /cgi-bin/test.py with raw data ==
------------------------------------------------------------
>> curl -s -i -X GET http://localhost:8080/cgi-bin/test.py -H "Content-Type: application/x-www-form-urlencoded" -d "name=test"
HTTP/1.1 200 OK
Connection: close
Content-Length: 33
Content-Type: text/html


<html><body>Hello</body></html>

[OK] CGI GET with data returned 200 OK
------------------------------------------------------------
== Test 7: POST /cgi-bin/cgi_post.py with file upload ==
------------------------------------------------------------
>> curl -s -i -X POST http://localhost:8080/cgi-bin/cgi_post.py -F "file=@test.cpp"
HTTP/1.1 200 OK
Connection: close
Content-Length: 110
Content-Type: text/html

<h1>File 'test.cpp' uploaded successfully to /home/mcheragh/Desktop/webserv/Webserv/www/upload/test.cpp!</h1>

[OK] CGI POST (file) returned 200 OK
------------------------------------------------------------
== Test 8: GET /cgi-bin/cgi_path_info.py/foo/bar (PATH_INFO test) ==
------------------------------------------------------------
>> curl -s -i -w "\nHTTP %{http_code}\n" http://localhost:8080/cgi-bin/cgi_path_info.py/foo/bar
HTTP/1.1 200 OK
Connection: close
Content-Length: 79
Content-Type: text/html

<html><body>
<h1>PATH_INFO Test</h1>
<p>PATH_INFO: /foo/bar</p>
</body></html>

HTTP 200

[OK] CGI PATH_INFO correctly set and returned.
------------------------------------------------------------
== Test 9: POST /cgi-bin/echo_body.py with chunked encoding ==
------------------------------------------------------------
>> curl -s -i -X POST http://localhost:8080/cgi-bin/echo_body.py -H "Transfer-Encoding: chunked" -d "ChunkedBodyTest"
HTTP/1.1 200 OK
Connection: close
Content-Length: 16
Content-Type: text/plain

ChunkedBodyTest

[OK] CGI received and echoed chunked body correctly.
------------------------------------------------------------
== Test 10: 501 Not Implemented ==
------------------------------------------------------------
>> curl -s -i -X PATCH http://localhost:8080/
HTTP/1.1 501 Not Implemented
Connection: close
Content-Length: 165
Content-Type: text/html

<!DOCTYPE html><html><head><title>501 Not Implemented</title></head><body><h1>501 Not Implemented</h1><p>The server could not fulfill your request.</p></body></html>
[OK] 501 Not Implemented error returned.
------------------------------------------------------------
== Test 11: 405 Method Not Allowed ==
------------------------------------------------------------
>> curl -s -i -X DELETE http://localhost:8080/
HTTP/1.1 405 Method Not Allowed
Connection: close
Content-Length: 393
Content-Type: text/html

<!DOCTYPE html>
<html>
<head>
    <title>405 Method Not Allowed</title>
    <style>
        body { font-family: Arial; background: #fff0f0; color: #a00; text-align: center; margin-top: 5em; }
        a { color: #3366cc; }
    </style>
</head>
<body>
    <h1>405 Method Not Allowed</h1>
    <p>The method is not allowed for the requested URL.</p>
    <a href="/">Go to Home</a>
</body>
</html>

[OK] 405 Method Not Allowed error returned.
------------------------------------------------------------
== Test 12: 413 Payload Too Large ==
------------------------------------------------------------
>> curl -s -X POST http://localhost:8080/upload -F file=@bigfile.txt
<!DOCTYPE html>
<html>
<head>
    <title>413 Payload Too Large</title>
    <style>
        body { font-family: Arial; background: #fff0f0; color: #a00; text-align: center; margin-top: 5em; }
        a { color: #3366cc; }
    </style>
</head>
<body>
    <h1>413 Payload Too Large</h1>
    <p>The request is too large for the server to handle.</p>
    <a href="/">Go to Home</a>
</body>
</html>

[OK] 413 Payload Too Large error returned.
------------------------------------------------------------
== Test 13: 400 Bad Request ==
------------------------------------------------------------
>> printf "GET /missing_http_version\r\n\r\n" | nc localhost 8080
HTTP/1.1 400 Bad Request
Connection: close
Content-Length: 157
Content-Type: text/html

<!DOCTYPE html><html><head><title>400 Bad Request</title></head><body><h1>400 Bad Request</h1><p>The server could not fulfill your request.</p></body></html>
[OK] 400 Bad Request error returned.
------------------------------------------------------------
== Test 15: 403 Forbidden ==
------------------------------------------------------------
>> touch www/upload/forbidden.txt && chmod 444 www/upload/forbidden.txt && curl -s -i -F file=@test.cpp http://localhost:8080/upload/forbidden.txt
HTTP/1.1 403 Forbidden
Connection: close
Content-Length: 378
Content-Type: text/html

<!DOCTYPE html>
<html>
<head>
    <title>403 Forbidden</title>
    <style>
        body { font-family: Arial; background: #fff0f0; color: #a00; text-align: center; margin-top: 5em; }
        a { color: #3366cc; }
    </style>
</head>
<body>
    <h1>403 Forbidden</h1>
    <p>You do not have permission to access this resource.</p>
    <a href="/">Go to Home</a>
</body>
</html>

[OK] 403 Forbidden error returned.
------------------------------------------------------------
== Test 16: 404 Not Found ==
------------------------------------------------------------
>> curl -s -i http://localhost:8080/doesnotexist.txt
HTTP/1.1 404 Not Found
Connection: close
Content-Length: 483
Content-Type: text/html

<!DOCTYPE html>
<html>
<head>
    <title>404 Not Found</title>
    <style>
        body { font-family: Arial; background: #fff0f0; color: #a00; text-align: center; margin-top: 5em; }
        a { color: #3366cc; }
    </style>
</head>
<body>
    <h1>404 Not Found</h1>
    <p>The requested resource could not be found on this server.</p>
    <p>If you believe this is an error, please <a href="mailto:your@email.com">contact us</a>.</p>
    <a href="/">Go to Home</a>
</body>
</html>

[OK] 404 Not Found error returned.
------------------------------------------------------------
== Test 17: 500 Internal Server Error ==
------------------------------------------------------------
>> curl http://localhost:8080/cgi-bin/error500.py
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100   389  100   389    0     0  36781      0 --:--:-- --:--:-- --:--:-- 38900
<!DOCTYPE html>
<html>
<head>
    <title>500 Internal Server Error</title>
    <style>
        body { font-family: Arial; background: #fff0f0; color: #a00; text-align: center; margin-top: 5em; }
        a { color: #3366cc; }
    </style>
</head>
<body>
    <h1>500 Internal Server Error</h1>
    <p>Oops! Something went wrong on our end.</p>
    <a href="/">Go to Home</a>
</body>
</html>

[OK] 500 Internal Server Error returned.
------------------------------------------------------------
== Test 18: 502 Bad Gateway ==
------------------------------------------------------------
>> curl http://localhost:8080/cgi-bin/test502.py
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100   157  100   157    0     0  14933      0 --:--:-- --:--:-- --:--:-- 15700
<!DOCTYPE html><html><head><title>502 Bad Gateway</title></head><body><h1>502 Bad Gateway</h1><p>The server could not fulfill your request.</p></body></html>
[OK] 502 (Bad Gateway)
------------------------------------------------------------
== Test 19: POST without Content_length ==
------------------------------------------------------------
>> curl -s -i -X POST http://localhost:8080/upload -H  --data 1236565465446
HTTP/1.1 411 Length Required
Connection: close
Content-Length: 165
Content-Type: text/html

<!DOCTYPE html><html><head><title>411 Length Required</title></head><body><h1>411 Length Required</h1><p>The server could not fulfill your request.</p></body></html>
[OK] POST/ 411 Length Required
------------------------------------------------------------
== Test 20: double Content_length ==
------------------------------------------------------------
>> curl -i -s -H 'Content-Length: 3' -H 'Content-Length: 5' -d 'foo' http://localhost:8080/
HTTP/1.1 400 Bad Request
Connection: close
Content-Length: 157
Content-Type: text/html

<!DOCTYPE html><html><head><title>400 Bad Request</title></head><body><h1>400 Bad Request</h1><p>The server could not fulfill your request.</p></body></html>
[OK] 400 Bad Request
------------------------------------------------------------
== Test 21: Wrong Location ==
------------------------------------------------------------
>> curl -s -i http://localhost:8080/%00test/
HTTP/1.1 404 Not Found
Connection: close
Content-Length: 483
Content-Type: text/html

<!DOCTYPE html>
<html>
<head>
    <title>404 Not Found</title>
    <style>
        body { font-family: Arial; background: #fff0f0; color: #a00; text-align: center; margin-top: 5em; }
        a { color: #3366cc; }
    </style>
</head>
<body>
    <h1>404 Not Found</h1>
    <p>The requested resource could not be found on this server.</p>
    <p>If you believe this is an error, please <a href="mailto:your@email.com">contact us</a>.</p>
    <a href="/">Go to Home</a>
</body>
</html>

[OK] 404 Not Found
------------------------------------------------------------
== Test 22: Unsupported HTTP Version (HTTP/0.9) ==
------------------------------------------------------------
>> printf 'GET /upload HTTP/0.9\r\nHost: localhost:8080\r\n\r\n' | nc localhost 8080
HTTP/1.1 505 HTTP Version Not Supported
Connection: close
Content-Length: 187
Content-Type: text/html

<!DOCTYPE html><html><head><title>505 HTTP Version Not Supported</title></head><body><h1>505 HTTP Version Not Supported</h1><p>The server could not fulfill your request.</p></body></html>
[OK] 505 HTTP Version Not Supported
------------------------------------------------------------
== Test 23: Malformed HTTP Version ==
------------------------------------------------------------
>> printf 'GET /upload HTTP/ABC\r\nHost: localhost:8080\r\n\r\n' | nc localhost 8080
HTTP/1.1 400 Bad Request
Connection: close
Content-Length: 157
Content-Type: text/html

<!DOCTYPE html><html><head><title>400 Bad Request</title></head><body><h1>400 Bad Request</h1><p>The server could not fulfill your request.</p></body></html>
[OK] 400 Bad Request for malformed version
------------------------------------------------------------
== Test 24: Missing Colon in Content-Length Header ==
------------------------------------------------------------
>> printf 'POST /upload HTTP/1.1\r\nHost: localhost:8080\r\nContent-Length 5\r\n\r\nhello' | nc localhost 8080
HTTP/1.1 400 Bad Request
Connection: close
Content-Length: 157
Content-Type: text/html

<!DOCTYPE html><html><head><title>400 Bad Request</title></head><body><h1>400 Bad Request</h1><p>The server could not fulfill your request.</p></body></html>
[OK] 400 Bad Request
------------------------------------------------------------
== Transfer-Encoding: chunked Edge Cases ==
------------------------------------------------------------
------------------------------------------------------------
== Test 25: CONTENT-LENGTH all caps ==
------------------------------------------------------------
>> curl -s -i -X POST -H 'CONTENT_LENGTH: 5' --data 'abcde' http://localhost:8080/cgi-bin/echo_body.py
HTTP/1.1 200 OK
Connection: close
Content-Length: 6
Content-Type: text/plain

abcde

[OK] CONTENT-LENGTH (all caps) header accepted and parsed
------------------------------------------------------------
== Test 26: Valid chunked encoding (curl automatic) ==
------------------------------------------------------------
>> curl -s -i -X POST -H 'Transfer-Encoding: chunked' --data-binary 'hello world' http://localhost:8080/cgi-bin/echo_body.py
HTTP/1.1 200 OK
Connection: close
Content-Length: 12
Content-Type: text/plain

hello world

[OK] Valid chunked encoding processed correctly
------------------------------------------------------------
== Test 27: Large chunked data ==
------------------------------------------------------------
>> curl -s -i -X POST -H 'Transfer-Encoding: chunked' --data-binary "$(python3 -c 'print("A" * 1000)')" http://localhost:8080/cgi-bin/echo_body.py
HTTP/1.1 200 OK
Connection: close
Content-Length: 1001
Content-Type: text/plain



[OK] Large chunked data processed correctly
------------------------------------------------------------
== Test 28: Empty chunked body ==
------------------------------------------------------------
>> curl -s -i -X POST -H 'Transfer-Encoding: chunked' --data-binary '' http://localhost:8080/cgi-bin/echo_body.py
HTTP/1.1 200 OK
Connection: close
Content-Length: 1
Content-Type: text/plain



[OK] Empty chunked body handled correctly
------------------------------------------------------------
== Test 29: Multiple small chunks (automatic) ==
------------------------------------------------------------
>> curl -s -i -X POST -H 'Transfer-Encoding: chunked' --data-binary 'chunk1chunk2chunk3' http://localhost:8080/cgi-bin/echo_body.py
HTTP/1.1 200 OK
Connection: close
Content-Length: 19
Content-Type: text/plain

chunk1chunk2chunk3

[OK] Multiple chunks processed correctly
------------------------------------------------------------
== Test 30: Chunked with special characters ==
------------------------------------------------------------
>> curl -s -i -X POST -H 'Transfer-Encoding: chunked' --data-binary 'Hello\nWorld\r\nTest!' http://localhost:8080/cgi-bin/echo_body.py
HTTP/1.1 200 OK
Connection: close
Content-Length: 22
Content-Type: text/plain

Hello\nWorld\r\nTest!

[OK] Chunked data with special characters handled correctly
------------------------------------------------------------
== Test 31: Chunked with binary data ==
------------------------------------------------------------
>> curl -s -i -X POST -H 'Transfer-Encoding: chunked' --data-binary $'\x00\x01\x02\x03\xFF' http://localhost:8080/cgi-bin/echo_body.py
HTTP/1.1 200 OK
Connection: close
Content-Length: 1
Content-Type: text/plain



[OK] Chunked binary data handled correctly
------------------------------------------------------------
== Test 32: Chunked with Content-Length header (should ignore CL) ==
------------------------------------------------------------
>> curl -s -i -X POST -H 'Transfer-Encoding: chunked' -H 'Content-Length: 999' --data-binary 'test data' http://localhost:8080/cgi-bin/echo_body.py
HTTP/1.1 400 Bad Request
Connection: close
Content-Length: 157
Content-Type: text/html

<!DOCTYPE html><html><head><title>400 Bad Request</title></head><body><h1>400 Bad Request</h1><p>The server could not fulfill your request.</p></body></html>
[OK] Content-Length ignored when chunked encoding used
------------------------------------------------------------
== Test 33: Transfer-Encoding case insensitive ==
------------------------------------------------------------
>> curl -s -i -X POST -H 'TRANSFER-ENCODING: CHUNKED' --data-binary 'case test' http://localhost:8080/cgi-bin/echo_body.py
HTTP/1.1 200 OK
Connection: close
Content-Length: 10
Content-Type: text/plain

case test

[OK] Transfer-Encoding is case insensitive
------------------------------------------------------------
== Invalid Transfer-Encoding Edge Cases ==
------------------------------------------------------------
------------------------------------------------------------
== Test 34: Unsupported Transfer-Encoding (gzip) ==
------------------------------------------------------------
>> curl -s -i -X POST -H 'Transfer-Encoding: gzip' --data-binary 'test data' http://localhost:8080/cgi-bin/echo_body.py
HTTP/1.1 501 Not Implemented
Connection: close
Content-Length: 165
Content-Type: text/html

<!DOCTYPE html><html><head><title>501 Not Implemented</title></head><body><h1>501 Not Implemented</h1><p>The server could not fulfill your request.</p></body></html>
[OK] Unsupported Transfer-Encoding handled (might accept or reject)
------------------------------------------------------------
== Test 35: Invalid Transfer-Encoding value ==
------------------------------------------------------------
>> curl -s -i -X POST -H 'Transfer-Encoding: invalid-encoding' --data-binary 'test data' http://localhost:8080/cgi-bin/echo_body.py
HTTP/1.1 501 Not Implemented
Connection: close
Content-Length: 165
Content-Type: text/html

<!DOCTYPE html><html><head><title>501 Not Implemented</title></head><body><h1>501 Not Implemented</h1><p>The server could not fulfill your request.</p></body></html>
[OK] Invalid Transfer-Encoding value handled
------------------------------------------------------------
== Test 36: Multiple Transfer-Encoding headers ==
------------------------------------------------------------
>> curl -s -i -X POST -H 'Transfer-Encoding: gzip, chunked' --data-binary 'test data' http://localhost:8080/cgi-bin/echo_body.py
HTTP/1.1 501 Not Implemented
Connection: close
Content-Length: 165
Content-Type: text/html

<!DOCTYPE html><html><head><title>501 Not Implemented</title></head><body><h1>501 Not Implemented</h1><p>The server could not fulfill your request.</p></body></html>
[OK] Multiple Transfer-Encoding headers handled
------------------------------------------------------------
== Test 37: Transfer-Encoding with both chunked and Content-Length ==
------------------------------------------------------------
>> printf 'POST /cgi-bin/echo_body.py HTTP/1.1\r\nHost: localhost:8080\r\nTransfer-Encoding: chunked\r\nContent-Length: 5\r\n\r\n5\r\nhello\r\n0\r\n\r\n' | nc -w 3 localhost 8080
HTTP/1.1 400 Bad Request
Connection: close
Content-Length: 157
Content-Type: text/html

<!DOCTYPE html><html><head><title>400 Bad Request</title></head><body><h1>400 Bad Request</h1><p>The server could not fulfill your request.</p></body></html>
[OK] Both Transfer-Encoding and Content-Length headers handled
------------------------------------------------------------
== Test 38: Malformed chunked claim with plain body ==
------------------------------------------------------------
>> printf 'POST /cgi-bin/echo_body.py HTTP/1.1\r\nHost: localhost:8080\r\nTransfer-Encoding: chunked\r\n\r\nhello world without chunks\r\n\r\n' | nc -w 3 localhost 8080
HTTP/1.1 400 Bad Request
Connection: close
Content-Length: 157
Content-Type: text/html

<!DOCTYPE html><html><head><title>400 Bad Request</title></head><body><h1>400 Bad Request</h1><p>The server could not fulfill your request.</p></body></html>
[OK] Claiming chunked but sending plain body
------------------------------------------------------------
== Expect Header Tests ==
------------------------------------------------------------
------------------------------------------------------------
== Test 39: Expect 100-continue with POST ==
------------------------------------------------------------
>> curl -s -i -X POST -H 'Expect: 100-continue' --data-binary 'test data for expect continue' http://localhost:8080/cgi-bin/echo_body.py
HTTP/1.1 100 Continue
Connection: close
Content-Length: 0
Content-Type: text/html

HTTP/1.1 200 OK
Connection: close
Content-Length: 30
Content-Type: text/plain

test data for expect continue

[OK] Expect: 100-continue handled correctly
------------------------------------------------------------
== Test 40: Large POST with Expect 100-continue ==
------------------------------------------------------------
>> curl -s -i -X POST -H 'Expect: 100-continue' --data-binary "$(python3 -c 'print("ExpectData" * 100)')" http://localhost:8080/cgi-bin/echo_body.py
HTTP/1.1 100 Continue
Connection: close
Content-Length: 0
Content-Type: text/html

HTTP/1.1 200 OK
Connection: close
Content-Length: 1001
Content-Type: text/plain

ExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectDataExpectData

[OK] Large POST with Expect: 100-continue handled correctly
------------------------------------------------------------
== Manual chunked encoding edge cases ==
------------------------------------------------------------
------------------------------------------------------------
== Test 41: Invalid chunk size (non-hex) ==
------------------------------------------------------------
>> printf 'POST /cgi-bin/echo_body.py HTTP/1.1\r\nHost: localhost:8080\r\nTransfer-Encoding: chunked\r\n\r\nGG\r\nhello\r\n0\r\n\r\n' | nc -w 3 localhost 8080
HTTP/1.1 400 Bad Request
Connection: close
Content-Length: 157
Content-Type: text/html

<!DOCTYPE html><html><head><title>400 Bad Request</title></head><body><h1>400 Bad Request</h1><p>The server could not fulfill your request.</p></body></html>
[OK] Invalid chunk size returns 400 Bad Request
------------------------------------------------------------
== Test 42: Missing final chunk (0) ==
------------------------------------------------------------
>> printf 'POST /cgi-bin/echo_body.py HTTP/1.1\r\nHost: localhost:8080\r\nTransfer-Encoding: chunked\r\n\r\n5\r\nhello\r\n' | nc -w 3 localhost 8080
HTTP/1.1 400 Bad Request
Connection: close
Content-Length: 157
Content-Type: text/html

<!DOCTYPE html><html><head><title>400 Bad Request</title></head><body><h1>400 Bad Request</h1><p>The server could not fulfill your request.</p></body></html>
[OK] Missing final chunk returns 400 Bad Request
------------------------------------------------------------
== Test 43: Chunk size larger than actual data ==
------------------------------------------------------------
>> printf 'POST /cgi-bin/echo_body.py HTTP/1.1\r\nHost: localhost:8080\r\nTransfer-Encoding: chunked\r\n\r\nA\r\nhello\r\n0\r\n\r\n' | nc -w 3 localhost 8080
HTTP/1.1 400 Bad Request
Connection: close
Content-Length: 157
Content-Type: text/html

<!DOCTYPE html><html><head><title>400 Bad Request</title></head><body><h1>400 Bad Request</h1><p>The server could not fulfill your request.</p></body></html>
[OK] Chunk size mismatch returns 400 Bad Request
------------------------------------------------------------
== Test 44: Invalid Transfer-Encoding (not chunked) ==
------------------------------------------------------------
>> curl -s -i -X POST -H 'Transfer-Encoding: gzip' --data-binary 'test' http://localhost:8080/cgi-bin/echo_body.py
HTTP/1.1 501 Not Implemented
Connection: close
Content-Length: 165
Content-Type: text/html

<!DOCTYPE html><html><head><title>501 Not Implemented</title></head><body><h1>501 Not Implemented</h1><p>The server could not fulfill your request.</p></body></html>
[OK] Non-chunked Transfer-Encoding returns 501
------------------------------------------------------------
== Test 45: Very long chunk size line ==
------------------------------------------------------------
>> printf 'POST /cgi-bin/echo_body.py HTTP/1.1\r\nHost: localhost:8080\r\nTransfer-Encoding: chunked\r\n\r\n%s\r\nhello\r\n0\r\n\r\n| nc -w 3 localhost 8080
HTTP/1.1 400 Bad Request
Connection: close
Content-Length: 157
Content-Type: text/html

<!DOCTYPE html><html><head><title>400 Bad Request</title></head><body><h1>400 Bad Request</h1><p>The server could not fulfill your request.</p></body></html>
[OK] Very long chunk size line returns 400 Bad Request
------------------------------------------------------------
== Test 46: Chunked POST to upload endpoint ==
------------------------------------------------------------
>> curl -s -i -X POST -H 'Transfer-Encoding: chunked' --data-binary 'file content here' http://localhost:8080/upload
HTTP/1.1 201 Created
Connection: keep-alive
Content-Length: 801
Content-Type: text/html; charset=utf-8
Keep-Alive: timeout=5, max=100
Location: www/upload/upload_20250903_123317

<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1"><title>Upload Successful</title><link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"></head><body class="bg-dark text-light d-flex flex-column justify-content-center align-items-center" style="font-family:sans-serif;min-height:100vh;"><h1 class="mb-3">✅ File uploaded successfully!</h1><p class="mb-4">Saved as: <code>www/upload/upload_20250903_123317</code></p><div class="d-flex gap-3"><a href="/" class="btn btn-outline-light">Home</a><a href="/methods.html#demos" class="btn btn-success">Go back</a></div><script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script></body></html>
[OK] Chunked POST to upload endpoint returned 201 Created
------------------------------------------------------------
== Test 47: Chunked with Connection: close ==
------------------------------------------------------------
>> curl -s -i -X POST -H 'Transfer-Encoding: chunked' -H 'Connection: close' --data-binary 'connection test' http://localhost:8080/cgi-bin/echo_body.py
HTTP/1.1 200 OK
Connection: close
Content-Length: 16
Content-Type: text/plain

connection test

[OK] Chunked with Connection: close handled correctly
------------------------------------------------------------
== Test 48: Expect 100-continue with oversized Content-Length (should get 413) ==
------------------------------------------------------------
>> curl -i -s -X POST http://localhost:8080/ -H 'Expect: 100-continue' -H 'Content-Length: 100001' --data-binary @<(head -c 100001 /dev/zero)
HTTP/1.1 413 Payload Too Large
Connection: close
Content-Length: 393
Content-Type: text/html

<!DOCTYPE html>
<html>
<head>
    <title>413 Payload Too Large</title>
    <style>
        body { font-family: Arial; background: #fff0f0; color: #a00; text-align: center; margin-top: 5em; }
        a { color: #3366cc; }
    </style>
</head>
<body>
    <h1>413 Payload Too Large</h1>
    <p>The request is too large for the server to handle.</p>
    <a href="/">Go to Home</a>
</body>
</html>

[OK] Expect: 100-continue oversized CL triggers 413
------------------------------------------------------------
== Test 49: POST with Expect: 100-continue and no Content-Length or chunked encoding (should get 411) ==
------------------------------------------------------------
>> curl -i -s -X POST http://127.0.0.1:8080/upload -H 'Expect: 100-continue' --data-binary "$(head -c 10240 /dev/zero)"
./test_all.sh: line 40: warning: command substitution: ignored null byte in input
HTTP/1.1 411 Length Required
Connection: close
Content-Length: 165
Content-Type: text/html

<!DOCTYPE html><html><head><title>411 Length Required</title></head><body><h1>411 Length Required</h1><p>The server could not fulfill your request.</p></body></html>
[OK] Expect: 100-continue without CL/chunked triggers 411
------------------------------------------------------------
== Test 50: 301 redirect ==
------------------------------------------------------------
>> curl localhost:8080/old
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100   126  100   126    0     0   425k      0 --:--:-- --:--:-- --:--:--  123k
<html><head><title>301 Redirect</title></head><body><h1>301 Redirect</h1><p>Redirecting to <a href="/">/</a></p></body></html>
[OK] Redirect
------------------------------------------------------------
== Test 51: 301 redirect ==
------------------------------------------------------------
>> curl -i localhost:8080/upload
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100  1334  100  1334    0     0  4492k      0 --:--:-- --:--:-- --:--:-- 1302k
HTTP/1.1 200 OK
Connection: close
Content-Length: 1334
Content-Type: text/html

<!DOCTYPE html><html><head><title>Index of /upload</title><style>body{font-family:sans-serif;}table{width:60%;margin:auto;}th,td{text-align:left;padding:4px;}tr:nth-child(even){background:#f9f9f9;}a{text-decoration:none;}</style></head><body><h1>Index of /upload</h1><table><tr><th>Name</th></tr><tr><td><a href="/upload/test.cpp">test.cpp</a></td></tr><tr><td><a href="/upload/test_20250903_104008.txt">test_20250903_104008.txt</a></td></tr><tr><td><a href="/upload/test_20250903_104343.txt">test_20250903_104343.txt</a></td></tr><tr><td><a href="/upload/test_20250903_104712.txt">test_20250903_104712.txt</a></td></tr><tr><td><a href="/upload/test_20250903_105354.txt">test_20250903_105354.txt</a></td></tr><tr><td><a href="/upload/test_20250903_121939.txt">test_20250903_121939.txt</a></td></tr><tr><td><a href="/upload/test_20250903_123315.txt">test_20250903_123315.txt</a></td></tr><tr><td><a href="/upload/upload_20250903_104345">upload_20250903_104345</a></td></tr><tr><td><a href="/upload/upload_20250903_104714">upload_20250903_104714</a></td></tr><tr><td><a href="/upload/upload_20250903_105357">upload_20250903_105357</a></td></tr><tr><td><a href="/upload/upload_20250903_121941">upload_20250903_121941</a></td></tr><tr><td><a href="/upload/upload_20250903_123317">upload_20250903_123317</a></td></tr></table></body></html>
[OK] Directory Listing
------------------------------------------------------------
== Test 52: 200 File Request ==
------------------------------------------------------------
>> curl -i -X GET http://localhost:8080/upload/test.cpp
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100   216  100   216    0     0   734k      0 --:--:-- --:--:-- --:--:--  210k
HTTP/1.1 200 OK
Connection: close
Content-Length: 216
Content-Type: application/octet-stream


/*

#include "WebServer.hpp"
#include "config/Config.hpp"
#include "cgi/CGIHandler.hpp"
#include "http/Request.hpp"
#include <iostream>
#include <map>
#include <signal.h>
#include <sys/wait.h>
#include <unistd.h>
*/
[OK] File Request
------------------------------------------------------------
== Test 53: 408 Request Timeout ==
------------------------------------------------------------
[OK] 408 Request Timeout returned for idle connection.
------------------------------------------------------------
== Test 54: 504 Gateway Timeout (CGI timeout test) ==
------------------------------------------------------------
HTTP/1.1 504 Gateway Timeout
Connection: close
Content-Length: 375
Content-Type: text/html

<!DOCTYPE html>
<html>
<head>
    <title>504 Gateway Timeout</title>
    <style>
        body { font-family: Arial; background: #fff0f0; color: #a00; text-align: center; margin-top: 5em; }
        a { color: #3366cc; }
    </style>
</head>
<body>
    <h1>504 Gateway Timeout</h1>
    <p>The server took too long to respond.</p>
    <a href="/">Go to Home</a>
</body>
</html>
[OK] 504 Gateway Timeout error returned for CGI timeout.
------------------------------------------------------------
== Checking Results ==
------------------------------------------------------------
[OK] File uploaded successfully as www/upload/test_20250903_104008.txt.
[OK] File deleted successfully.
[OK] CGI GET returned Content-Type header.
[OK] CGI POST returned Content-Type header.
------------------------------------------------------------
== Cleanup ==
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
