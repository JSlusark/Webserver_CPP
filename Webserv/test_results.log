------------------------------------------------------------
== Setup: Creating test files and directories ==
------------------------------------------------------------
------------------------------------------------------------
== Test 2: POST /upload (multipart/form-data) ==
------------------------------------------------------------
>> curl -s -i -w "\nHTTP %{http_code}\n" -X POST http://localhost:8080/upload -F "file=@test.txt"
HTTP/1.1 200 OK
Connection: close
Content-Length: 523
Content-Type: text/html; charset=utf-8

<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8"><title>Upload Successful</title></head><body style="font-family:sans-serif;text-align:center;margin-top:50px;"><h1>âœ… File uploaded successfully!</h1><p>Saved as: <code>www/upload/test.txt_20250626_151157.txt</code></p><br><br><a href="/" style="margin: 0 10px;"><button>Home</button></a><a href="/about" style="margin: 0 10px;"><button>About</button></a><a href="/static/upload" style="margin: 0 10px;"><button>Upload Another</button></a></body></html>
HTTP 200

[OK] POST /upload returned 200 OK
------------------------------------------------------------
== Test 3: DELETE /1.txt ==
------------------------------------------------------------
>> curl -s -i -w "\nHTTP %{http_code}\n" -X DELETE http://localhost:8080/upload/1.txt
HTTP/1.1 200 OK
Connection: close
Content-Length: 62
Content-Type: text/html

<html><body><h1>File deleted: /upload/1.txt</h1></body></html>
HTTP 200

[OK] DELETE /1.txt returned 200 OK
------------------------------------------------------------
== Test 4: GET /cgi-bin/test.py ==
------------------------------------------------------------
>> curl -s -i -w "\nHTTP %{http_code}\n" http://localhost:8080/cgi-bin/test.py
HTTP/1.1 200 OK
Connection: close
Content-Length: 33
Content-Type: text/html


<html><body>Hello</body></html>

HTTP 200

[OK] CGI GET returned 200 OK
------------------------------------------------------------
== Test 4b: CGI with Content-Length ==
------------------------------------------------------------
>> curl -s -i http://localhost:8080/cgi-bin/cgi_with_content_length.py
HTTP/1.1 200 OK
Connection: close
Content-Length: 10
Content-Type: text/html

<html><bod
[OK] CGI with Content-Length returns only specified bytes.
------------------------------------------------------------
== Test 5: GET /cgi-bin/test.py with raw data ==
------------------------------------------------------------
>> curl -s -i -X GET http://localhost:8080/cgi-bin/test.py -H "Content-Type: application/x-www-form-urlencoded" -d "name=test"
HTTP/1.1 200 OK
Connection: close
Content-Length: 33
Content-Type: text/html


<html><body>Hello</body></html>

[OK] CGI GET with data returned 200 OK
------------------------------------------------------------
== Test 6: POST /cgi-bin/cgi_post.py with file upload ==
------------------------------------------------------------
>> curl -s -i -X POST http://localhost:8080/cgi-bin/cgi_post.py -F "file=@test.cpp"
HTTP/1.1 200 OK
Connection: close
Content-Length: 111
Content-Type: text/html

<h1>File 'test.cpp' uploaded successfully to /home/mcheragh/Desktop/new_webb/Webserv/www/upload/test.cpp!</h1>

[OK] CGI POST (file) returned 200 OK
------------------------------------------------------------
== Test 7: GET /cgi-bin/cgi_path_info.py/foo/bar (PATH_INFO test) ==
------------------------------------------------------------
>> curl -s -i -w "\nHTTP %{http_code}\n" http://localhost:8080/cgi-bin/cgi_path_info.py/foo/bar
HTTP/1.1 200 OK
Connection: close
Content-Length: 79
Content-Type: text/html

<html><body>
<h1>PATH_INFO Test</h1>
<p>PATH_INFO: /foo/bar</p>
</body></html>

HTTP 200

[OK] CGI PATH_INFO correctly set and returned.
------------------------------------------------------------
== Test 8: POST /cgi-bin/echo_body.py with chunked encoding ==
------------------------------------------------------------
>> curl -s -i -X POST http://localhost:8080/cgi-bin/echo_body.py -H "Transfer-Encoding: chunked" -d "ChunkedBodyTest"
HTTP/1.1 200 OK
Connection: close
Content-Length: 16
Content-Type: text/plain

ChunkedBodyTest

[OK] CGI received and echoed chunked body correctly.
------------------------------------------------------------
== Test 9: 501 Not Implemented ==
------------------------------------------------------------
>> curl -s -i -X PATCH http://localhost:8080/
HTTP/1.1 501 Not Implemented
Connection: close
Content-Length: 28
Content-Type: text/html

<h1>501 Not Implemented</h1>
[OK] 501 Not Implemented error returned.
------------------------------------------------------------
== Test 10: 405 Method Not Allowed ==
------------------------------------------------------------
>> curl -s -i -X DELETE http://localhost:8080/
HTTP/1.1 405 Method Not Allowed
Connection: close
Content-Length: 31
Content-Type: text/html

<h1>405 Method Not Allowed</h1>
[OK] 405 Method Not Allowed error returned.
------------------------------------------------------------
== Test 11: 413 Payload Too Large ==
------------------------------------------------------------
>> curl -X POST http://localhost:8080/upload -F file=@bigfile.txt
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed

  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
 37  169k    0     0   37 65536      0   137M --:--:-- --:--:-- --:--:-- 62.5M
curl: (55) Send failure: Broken pipe

[FAIL] 413 Payload Too Large error returned.
------------------------------------------------------------
== Test 12: 400 Bad Request ==
------------------------------------------------------------
>> printf "GET /missing_http_version\r\n\r\n" | nc localhost 8080
HTTP/1.1 400 Bad Request
Connection: close
Content-Length: 24
Content-Type: text/html

<h1>400 Bad Request</h1>
[OK] 400 Bad Request error returned.
------------------------------------------------------------
== Test 13: 401 Unauthorized ==
------------------------------------------------------------
>> curl -s -i http://localhost:8080/should_require_auth
HTTP/1.1 404 Not Found
Connection: close
Content-Length: 22
Content-Type: text/html

<h1>404 Not Found</h1>
[FAIL] 401 Unauthorized error returned.
------------------------------------------------------------
== Test 14: 403 Forbidden ==
------------------------------------------------------------
>> touch www/upload/forbidden.txt && chmod 444 www/upload/forbidden.txt && curl -i -F file=@test.txt http://localhost:8080/upload/test_forbidden.txt
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed

  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
100   207    0     0  100   207      0   383k --:--:-- --:--:-- --:--:--  202k
curl: (52) Empty reply from server

[FAIL] 403 Forbidden error returned.
------------------------------------------------------------
== Test 15: 404 Not Found ==
------------------------------------------------------------
>> curl -s -i http://localhost:8080/doesnotexist.txt
HTTP/1.1 404 Not Found
Connection: close
Content-Length: 22
Content-Type: text/html

<h1>404 Not Found</h1>
[OK] 404 Not Found error returned.
------------------------------------------------------------
== Test 16: 408 Request Timeout (manual/visual) ==
------------------------------------------------------------
Manual/visual: To test 408, connect with 'telnet localhost 8080', send nothing, and wait for timeout.
[OK] 408 Request Timeout test: Please check server logs or implement timeout logic.
------------------------------------------------------------
== Test 17: 500 Internal Server Error ==
------------------------------------------------------------
>> echo -e '#!/usr/bin/env python3\nimport sys\nsys.exit(1)' > www/cgi-bin/error500.py && chmod +x www/cgi-bin/error500.py && curl -s -i http://localhost:8080/cgi-bin/error500.py
HTTP/1.1 500 Internal Server Error
Connection: close
Content-Length: 34
Content-Type: text/html

<h1>500 Internal Server Error</h1>
[OK] 500 Internal Server Error returned.
------------------------------------------------------------
== Test 18: 502 Bad Gateway (manual/visual) ==
------------------------------------------------------------
Manual/visual: To test 502, configure your server as a proxy to a dead upstream.
[OK] 502 Bad Gateway test: Please check server logs or proxy config.
------------------------------------------------------------
== Test 19: 503 Service Unavailable (manual/visual) ==
------------------------------------------------------------
Manual/visual: To test 503, simulate server overload or maintenance mode.
[OK] 503 Service Unavailable test: Please check server logs or maintenance mode.
------------------------------------------------------------
== Test 20: 504 Gateway Timeout (CGI timeout test) ==
------------------------------------------------------------
HTTP/1.1 504 Gateway Timeout
Connection: close
Content-Length: 28
Content-Type: text/html

<h1>504 Gateway Timeout</h1>[OK] 504 Gateway Timeout error returned for CGI timeout.
------------------------------------------------------------
== Checking Results ==
------------------------------------------------------------
[OK] File uploaded successfully as www/upload/test.txt_20250615_163610.txt.
[OK] File deleted successfully.
[OK] CGI GET returned Content-Type header.
[OK] CGI POST returned Content-Type header.
------------------------------------------------------------
== Cleanup ==
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
