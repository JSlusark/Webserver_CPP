**Project Division Plan: WebServ HTTP Server**

**Overview:**
This document outlines the division of responsibilities between two team members (Team Member A and Team Member B) for the WebServ project. It explains the logic behind the division and how to coordinate for effective collaboration.

---

**Responsibilities Chart:**

| Component              | Class/File        | Responsible Member | Notes                                                   |
| ---------------------- | ----------------- | ------------------ | ------------------------------------------------------- |
| Server Core            | `WebServer`       | Team Member A      | Setup, polling, connection handling, socket I/O         |
| HTTP Request Handling  | `Request`         | Team Member A      | Parsing method, path, version, headers, body            |
| HTTP Response Handling | `Response`        | Team Member A      | Status codes, headers, body, response formatting        |
| Routing                | `Router`          | Team Member A      | Mapping requests to file system or dynamic handling     |
| Configuration Parsing  | `Config`          | Team Member B      | Server configuration from config files                  |
| CGI Execution          | `CGIHandler`      | Team Member B      | Run scripts and handle output/input                     |
| MIME & File Utilities  | `Utils` (helpers) | Team Member A      | File existence, MIME type detection, path resolution    |
| Integration Testing    | -                 | Shared             | Coordination on merging core loop with logic components |

---

**Shared Coordination Guidelines:**

* Use clear `.hpp` and `.cpp` file separation per class.
* Agree on method signatures and shared data structures early (especially for `Request`, `Response`, `Router`, `Config`).
* Each member writes unit tests for their components.
* Regular integration checkpoints: once `Request` and `Response` are stable, Team Member A integrates them with the server loop.
* Use a Git branching system: each team member works in a dedicated branch and merges via pull requests.

---

**Future Tasks (After Initial Build):**

* Logging and error reporting.
* Static route configuration parsing.
* CGI or dynamic response support (advanced feature).
* Security (e.g., input sanitization, header validation).

---

**Conclusion:**
This plan separates low-level server control from high-level protocol and extension logic, allowing both developers to work in parallel and later integrate seamlessly. Team Member A builds the server loop and protocol logic; Team Member B extends it with configurability and CGI support. This modularity ensures long-term maintainability and clarity.
